{
  "Comment": "A description of my state machine",
  "StartAt": "Wait 1 Second",
  "States": {
    "Wait 1 Second": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Save vars"
    },
    "Save vars": {
      "Type": "Pass",
      "Next": "Initialise run",
      "Assign": {
        "jobId": "{% $states.input.jobId %}",
        "jobType": "{% $states.input.jobType %}",
        "fastqIdList": "{% $states.input.fastqIdList ? $states.input.fastqIdList : null %}",
        "maxReads": "{% $states.input.maxReads ? $states.input.maxReads : -1 %}",
        "sampling": "{% $states.input.sampling ? $states.input.sampling : false %}",
        "s3JobMetadataBucket": "{% $states.input.s3JobMetadataBucket %}",
        "s3JobMetadataPrefix": "{% $states.input.s3JobMetadataPrefix %}",
        "outputUriPrefix": "{% $states.input.outputUriPrefix %}"
      }
    },
    "Initialise run": {
      "Type": "Parallel",
      "Next": "Job Type needs requirements",
      "Branches": [
        {
          "StartAt": "Update fastq decompression service status",
          "States": {
            "Update fastq decompression service status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${__update_fastq_decompression_service_status_lambda_function_arn__}",
                "Payload": {
                  "jobId": "{% $jobId %}",
                  "status": "RUNNING",
                  "stepsExecutionArn": "{% $states.context.Execution.Id %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Enable heartbeat monitor",
          "States": {
            "Enable heartbeat monitor": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__heartbeat_scheduler_rule_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:eventbridge:enableRule",
              "End": true
            }
          }
        }
      ]
    },
    "Job Type needs requirements": {
      "Type": "Choice",
      "Choices": [
        {
          "Comment": "Is Decompression Job Type",
          "Next": "Fastq Sync (wait for decompression stats)",
          "Condition": "{% ( \n $jobType = 'ORA_DECOMPRESSION' and\n ( \n   $maxReads = -1 or\n   $maxReads > ${__min_reads_to_require_gzip_stats__}\n )\n) %}"
        },
        {
          "Next": "Needs Read Count",
          "Condition": "{% $jobType = 'GZIP_FILESIZE_CALCULATION' or $sampling %}",
          "Comment": "Is Gzip Filesize Calculation Job Or Sampling Required"
        }
      ],
      "Default": "For each fastq pair"
    },
    "Fastq Sync (wait for decompression stats)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
      "Arguments": {
        "Entries": [
          {
            "Detail": {
              "taskToken": "{% $states.context.Task.Token %}",
              "payload": {
                "fastqIdList": "{% $fastqIdList %}",
                "requirements": {
                  "hasFileCompressionInformation": true
                }
              }
            },
            "DetailType": "${__fastq_sync_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "Next": "For each fastq pair"
    },
    "For each fastq pair": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Save map vars",
        "States": {
          "Save map vars": {
            "Type": "Pass",
            "Next": "Get Fastq Metadata Dict",
            "Assign": {
              "fastqIdListIter": "{% $states.input.fastqIdListIter %}"
            }
          },
          "Get Fastq Metadata Dict": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Arguments": {
              "FunctionName": "${__get_fastq_list_row_object_lambda_function_arn__}",
              "Payload": {
                "fastqId": "{% $fastqIdListIter %}",
                "outputUriPrefix": "{% $outputUriPrefix %}",
                "metadataBucket": "{% $s3JobMetadataBucket %}",
                "metadataPathPrefix": "{% $s3JobMetadataPrefix %}",
                "maxReads": "{% $maxReads %}"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "Decompress fastqs",
            "Assign": {
              "fastqObjDict": "{% $states.result.Payload.fastqObjDict %}"
            },
            "Output": {}
          },
          "Decompress fastqs": {
            "Type": "Parallel",
            "Branches": [
              {
                "StartAt": "Decompress R1",
                "States": {
                  "Decompress R1": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::ecs:runTask.sync",
                    "Arguments": {
                      "LaunchType": "FARGATE",
                      "Cluster": "${__cluster__}",
                      "TaskDefinition": "${__task_definition__}",
                      "NetworkConfiguration": {
                        "AwsvpcConfiguration": {
                          "Subnets": "{% $split('${__subnets__}', ',') %}",
                          "SecurityGroups": "{% [ '${__security_group__}' ] %}"
                        }
                      },
                      "Overrides": {
                        "ContainerOverrides": [
                          {
                            "Name": "${__container_name__}",
                            "Environment": [
                              {
                                "Name": "INPUT_ORA_URI",
                                "Value": "{% $fastqObjDict.r1OraFileUriSrc %}"
                              },
                              {
                                "Name": "FASTQ_ID",
                                "Value": "{% $fastqIdListIter %}"
                              },
                              {
                                "Name": "ORA_INGEST_ID",
                                "Value": "{% $fastqObjDict.r1OraIngestId %}"
                              },
                              {
                                "Name": "GZIP_COMPRESSION_SIZE_IN_BYTES",
                                "Value": "{% $string($fastqObjDict.r1GzipFileSizeInBytes ? $fastqObjDict.r1GzipFileSizeInBytes : -1) %}"
                              },
                              {
                                "Name": "OUTPUT_GZIP_URI",
                                "Value": "{% $fastqObjDict.r1GzipFileUriDest %}"
                              },
                              {
                                "Name": "OUTPUT_METADATA_URI",
                                "Value": "{% $fastqObjDict.r1OutputMetadataUri  %}"
                              },
                              {
                                "Name": "MAX_READS",
                                "Value": "{% $string($maxReads) %}"
                              },
                              {
                                "Name": "SAMPLING",
                                "Value": "{% $string($sampling) %}"
                              },
                              {
                                "Name": "JOB_TYPE",
                                "Value": "{% $jobType %}"
                              },
                              {
                                "Name": "TOTAL_READ_COUNT",
                                "Value": "{% $string($fastqObjDict.totalReadCount) %}"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "End": true
                  }
                }
              },
              {
                "StartAt": "If has r2",
                "States": {
                  "If has r2": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Comment": "R2 exists",
                        "Next": "Decompress R2",
                        "Condition": "{% (\n  $fastqObjDict.r2OraFileUriSrc ? true : false\n) and \n(\n  $jobType != 'READ_COUNT_CALCULATION'\n) %}"
                      }
                    ],
                    "Default": "Pass"
                  },
                  "Decompress R2": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::ecs:runTask.sync",
                    "Arguments": {
                      "LaunchType": "FARGATE",
                      "Cluster": "${__cluster__}",
                      "TaskDefinition": "${__task_definition__}",
                      "NetworkConfiguration": {
                        "AwsvpcConfiguration": {
                          "Subnets": "{% $split('${__subnets__}', ',') %}",
                          "SecurityGroups": "{% [ '${__security_group__}' ] %}"
                        }
                      },
                      "Overrides": {
                        "ContainerOverrides": [
                          {
                            "Name": "${__container_name__}",
                            "Environment": [
                              {
                                "Name": "INPUT_ORA_URI",
                                "Value": "{% $fastqObjDict.r2OraFileUriSrc %}"
                              },
                              {
                                "Name": "FASTQ_ID",
                                "Value": "{% $fastqIdListIter %}"
                              },
                              {
                                "Name": "ORA_INGEST_ID",
                                "Value": "{% $fastqObjDict.r2OraIngestId %}"
                              },
                              {
                                "Name": "GZIP_COMPRESSION_SIZE_IN_BYTES",
                                "Value": "{% $string($fastqObjDict.r2GzipFileSizeInBytes ? $fastqObjDict.r2GzipFileSizeInBytes : -1) %}"
                              },
                              {
                                "Name": "OUTPUT_GZIP_URI",
                                "Value": "{% $fastqObjDict.r2GzipFileUriDest %}"
                              },
                              {
                                "Name": "OUTPUT_METADATA_URI",
                                "Value": "{% $fastqObjDict.r2OutputMetadataUri  %}"
                              },
                              {
                                "Name": "MAX_READS",
                                "Value": "{% $string($maxReads) %}"
                              },
                              {
                                "Name": "SAMPLING",
                                "Value": "{% $string($sampling) %}"
                              },
                              {
                                "Name": "JOB_TYPE",
                                "Value": "{% $jobType %}"
                              },
                              {
                                "Name": "TOTAL_READ_COUNT",
                                "Value": "{% $string($fastqObjDict.totalReadCount) %}"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "End": true
                  },
                  "Pass": {
                    "Type": "Pass",
                    "End": true
                  }
                }
              }
            ],
            "Next": "Get metadata contents"
          },
          "Get metadata contents": {
            "Type": "Parallel",
            "Branches": [
              {
                "StartAt": "Get R1 Object",
                "States": {
                  "Get R1 Object": {
                    "Type": "Task",
                    "Arguments": {
                      "Bucket": "{% $s3JobMetadataBucket %}",
                      "Key": "{% $fastqObjDict.r1OutputMetadataPath %}"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
                    "End": true,
                    "Output": {
                      "data": "{% $parse($states.result.Body) %}"
                    }
                  }
                }
              },
              {
                "StartAt": "if has r2 (get data)",
                "States": {
                  "if has r2 (get data)": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Comment": "R2 file exists",
                        "Next": "Get R2 Object",
                        "Condition": "{% (\n  $fastqObjDict.r2OraFileUriSrc ? true : false\n) and \n(\n  $jobType != 'READ_COUNT_CALCULATION'\n) %}"
                      }
                    ],
                    "Default": "Pass (2)"
                  },
                  "Get R2 Object": {
                    "Type": "Task",
                    "Arguments": {
                      "Bucket": "{% $s3JobMetadataBucket %}",
                      "Key": "{% $fastqObjDict.r2OutputMetadataPath %}"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
                    "End": true,
                    "Output": {
                      "data": "{% $parse($states.result.Body) %}"
                    }
                  },
                  "Pass (2)": {
                    "Type": "Pass",
                    "End": true,
                    "Output": {}
                  }
                }
              }
            ],
            "Output": {
              "metadataJson": "{% /* https://try.jsonata.org/WzjRyuQxT */\n/* Gather data attribute from each attribute in the result map */\n [ $states.result.(data) ] %}"
            },
            "Next": "Set map iter output dict"
          },
          "Set map iter output dict": {
            "Type": "Pass",
            "End": true,
            "Output": {
              "metadataJsonWithFastqId": {
                "fastqId": "{% $fastqIdListIter %}",
                "metadataJson": "{% $states.input.metadataJson %}"
              }
            }
          }
        }
      },
      "Items": "{% $fastqIdList %}",
      "ItemSelector": {
        "fastqIdListIter": "{% $states.context.Map.Item.Value %}"
      },
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Assign": {
            "status": "FAILED"
          },
          "Next": "Update fastq decompression status (complete)"
        }
      ],
      "Next": "Update fastq decompression status (complete)",
      "Assign": {
        "metadataJsonFastqPairDictsList": "{% [ $states.result.(metadataJsonWithFastqId) ] %}"
      }
    },
    "Update fastq decompression status (complete)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${__update_fastq_decompression_service_status_lambda_function_arn__}",
        "Payload": {
          "jobId": "{% $jobId %}",
          "jobType": "{% $jobType %}",
          "metadataJsonFastqPairDictsList": "{% $metadataJsonFastqPairDictsList ? $metadataJsonFastqPairDictsList : null %}",
          "status": "{% $status ? $status : 'SUCCEEDED' %}",
          "fastqIdList": "{% $fastqIdList %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "Needs Read Count": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
      "Arguments": {
        "Entries": [
          {
            "Detail": {
              "taskToken": "{% $states.context.Task.Token %}",
              "payload": {
                "fastqIdList": "{% $fastqIdList %}",
                "requirements": {
                  "hasReadCountInformation": true
                }
              }
            },
            "DetailType": "${__fastq_sync_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "Next": "For each fastq pair"
    }
  },
  "QueryLanguage": "JSONata"
}
