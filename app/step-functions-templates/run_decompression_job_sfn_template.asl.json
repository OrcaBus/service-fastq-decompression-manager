{
  "Comment": "A description of my state machine",
  "StartAt": "Fastq Sync (wait for decompression stats)",
  "States": {
    "Fastq Sync (wait for decompression stats)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
      "Arguments": {
        "Entries": [
          {
            "Detail": {
              "Message": "Hello from Step Functions!",
              "TaskToken": "{% $states.context.Task.Token %}"
            },
            "DetailType": "MyDetailType",
            "EventBusName": "MyEventBusName",
            "Source": "MySource"
          }
        ]
      },
      "Next": "Update fastq decompression service status"
    },
    "Update fastq decompression service status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Get s3 uris for each fastq pair"
    },
    "Get s3 uris for each fastq pair": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "For each fastq pair"
    },
    "For each fastq pair": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Decompress fastqs",
        "States": {
          "Decompress fastqs": {
            "Type": "Parallel",
            "Branches": [
              {
                "StartAt": "Decompress R1",
                "States": {
                  "Decompress R1": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::ecs:runTask",
                    "Arguments": {
                      "LaunchType": "FARGATE",
                      "Cluster": "arn:aws:ecs:REGION:ACCOUNT_ID:cluster/MyECSCluster",
                      "TaskDefinition": "arn:aws:ecs:REGION:ACCOUNT_ID:task-definition/MyTaskDefinition:1"
                    },
                    "End": true
                  }
                }
              },
              {
                "StartAt": "If has r2",
                "States": {
                  "If has r2": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Next": "Decompress R2"
                      }
                    ],
                    "Default": "Pass"
                  },
                  "Decompress R2": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::ecs:runTask",
                    "Arguments": {
                      "LaunchType": "FARGATE",
                      "Cluster": "arn:aws:ecs:REGION:ACCOUNT_ID:cluster/MyECSCluster",
                      "TaskDefinition": "arn:aws:ecs:REGION:ACCOUNT_ID:task-definition/MyTaskDefinition:1"
                    },
                    "End": true
                  },
                  "Pass": {
                    "Type": "Pass",
                    "End": true
                  }
                }
              }
            ],
            "End": true
          }
        }
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
